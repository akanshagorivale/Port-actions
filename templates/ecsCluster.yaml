AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation Template for an ECS Cluster with EC2 Instance

Parameters:
  ClusterName:
    Description: Name for the ECS cluster
    Type: String
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: The cluster name must be between 1 and 255 characters.

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: Must be a valid EC2 instance type

  ImageId:
    Description: ID of the Amazon Machine Image (AMI) to use
    Type: AWS::EC2::Image::Id
    ConstraintDescription: Must be a valid AMI ID

  SecurityGroupIds:
    Description: List of Security Group IDs for the EC2 instance
    Type: List<AWS::EC2::SecurityGroup::Id>
    ConstraintDescription: Must be a list of valid Security Group IDs

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID where the EC2 instance should be launched

Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref ClusterName

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: node-key-pair
      SecurityGroups: !Ref SecurityGroupIds
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # echo ECS_CLUSTER=testcluster >> /etc/ecs/ecs.config
          sudo amazon-linux-extras disable docker
          sudo amazon-linux-extras install docker -y
          sudo amazon-linux-extras install -y ecs; sudo systemctl enable --now --no-block ecs.service
          sleep 10
          echo "ECS_CLUSTER=testcluster" | sudo tee /etc/ecs/ecs.config
          sudo sed -i '/After=cloud-final.service/d' /usr/lib/systemd/system/ecs.service
          sudo systemctl daemon-reload
          sudo sed -i '/After=cloud-final.service/d' /usr/lib/systemd/system/ecs.service
          sudo systemctl daemon-reload
          sleep 10

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: EC2AutoScalingGroup
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref SubnetId
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      NewInstancesProtectedFromScaleIn: true

  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup
        ManagedScaling:
          InstanceWarmupPeriod: 60
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 100
          Status: ENABLED
          # Percentage of cluster reservation to try to maintain
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED

  # Create a cluster capacity provider association so that the cluster
  # will use the capacity provider
  CapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      CapacityProviders:
        - !Ref CapacityProvider
      Cluster: !Ref ECSCluster
      DefaultCapacityProviderStrategy:
        - Base: 0
          CapacityProvider: !Ref CapacityProvider
          Weight: 1

Outputs:
  ECSClusterName:
    Description: Name of the created ECS cluster
    Value: !Ref ECSCluster
  ECSAutoScalingGroup:
    Description: Auto Scaling Group for ECS Cluster
    Value: !Ref AutoScalingGroup
