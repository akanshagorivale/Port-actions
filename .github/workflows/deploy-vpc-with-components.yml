name: Deploy VPC Stack

on:
  workflow_dispatch:
    inputs:
      vpc_cidr_block:
        required: true
        type: string
        description: VPC CIDR block
      public_subnet_cidr_block:
        required: true
        type: string
        description: Public Subnet CIDR block
      private_subnet_cidr_block:
        required: true
        type: string
        description: Private Subnet CIDR block
      peer_vpc_id:
        required: true
        type: string
        description: Peer VPC ID
      port_payload:
        required: true
        description:
          Port's payload, including details for who triggered the action and
          general context (blueprint, run id, etc...)
        type: string

jobs:
  deploy-vpc-stack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy VPC Stack
        run: aws cloudformation deploy --template-file templates/vpcWithComponents.yaml --stack-name VPCStack --parameter-overrides VpcCidrBlock=${{ inputs.vpc_cidr_block }}

      - name: UPSERT VPC Stack Entity in Port
        uses: port-labs/port-github-action@v1
        with:
          identifier: ${{ inputs.vpc_cidr_block }}
          title: ${{ inputs.vpc_cidr_block }}
          team: "[]"
          icon: VPC
          blueprint: vpc_stack
          properties: |-
            {
              "vpc_cidr_block": "${{ inputs.vpc_cidr_block }}",
              "public_subnet_cidr_block": "${{ inputs.public_subnet_cidr_block }}",
              "private_subnet_cidr_block": "${{ inputs.private_subnet_cidr_block }}"
              "peer_vpc_id": "${{ inputs.peer_vpc_id }}"
            }
          relations: "{}"
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: UPSERT
          runId: ${{fromJson(inputs.port_payload).context.runId}}
