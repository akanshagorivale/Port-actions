name: Deploy Application Stack

on:
  workflow_dispatch:
    inputs:
     vpc_cidr_block:
        required: true
        type: string
        description: CIDR Block for VPC
     public_subnet_cidr_block:
        required: true
        type: string
        description: CIDR Block for public subnet
     private_subnet_cidr_block:
        required: true
        type: string
        description: CIDR Block for private subnet
     elastic_ip:
        required: true
        type: string
        description: Elastic IP for NAT Gateway
     environment:
        required: true
        type: string
        description: Environment
     port_payload:
        required: true
        description: Port's payload, including details for who triggered the action and general context
        type: string
  pull_request:
    branches:
      - main

jobs:
  deployApplicationStack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Display Repository Contents
        run: ls -R

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: |
          cd templates/terraform  # Change to the directory where your Terraform files are
          terraform init

      - name: Set Terraform variables
        run: |
          cd templates/terraform  # Change to the directory where your Terraform files are
          echo "vpc_cidr_block = ${{ secrets.VPC_CIDR_BLOCK }}" >> test-terraform.tfvars
          echo "public_subnet_cidr_block = ${{ secrets.PUBLIC_SUBNET_CIDR_BLOCK }}" >> test-terraform.tfvars
          echo "private_subnet_cidr_block = ${{ secrets.PRIVATE_SUBNET_CIDR_BLOCK }}" >> test-terraform.tfvars
          echo "elastic_ip = ${{ secrets.ELASTIC_IP }}" >> test-terraform.tfvars
          echo "environment = ${{ secrets.ENVIRONMENT }}" >> test-terraform.tfvars

      - name: Terraform Apply
        run: |
          cd templates/terraform  # Change to the directory where your Terraform files are
          terraform apply -auto-approve -var-file=test-terraform.tfvars

  createEntityInPort:
    runs-on: ubuntu-latest
    needs: deployApplicationStack

    steps:
      - name: UPSERT Entity in Port
        uses: port-labs/port-github-action@v1
        with:
          identifier: ${{ github.repository_owner }}/my-s3-bucket
          blueprint: application_stacks
          properties: |-
            {
              "resource_definitions": "${{ github.server_url }}/${{ github.repository }}/${{ github.sha }}/main/",
              "vpc_cidr_block": "${{ inputs.vpc_cidr_block }}",
              "public_subnet_cidr_block": "${{ inputs.public_subnet_cidr_block }}",
              "private_subnet_cidr_block": "${{ inputs.private_subnet_cidr_block }}",
              "elastic_ip": "${{ inputs.elastic_ip }}",
              "environment": "${{ inputs.environment }}"
            }
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: UPSERT
